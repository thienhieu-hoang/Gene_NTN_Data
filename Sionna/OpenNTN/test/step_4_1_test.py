# This file is very huge, as it effectively tests a significant portion of the values in the parametrization tables for all scenarios.
# The order of Large Scale parameters (LSPs) differs from the standard and is: DS ASD ASA SF K ZSA ZSD. This is to keep
# in line with the rest of the Sionna implementation. At the moment the proper distribution of all sampled parameters is evaluated, a test of 
# the spatial and parameter-cross-correlation is still to be implemented.
# The LSP are generated by lsp.py, following the scheme of lsp = lsp_log_std*s + lsp_log_mean, in which s is the correlation matrix.
# As this part can be reused from the existing 3GPP TR38.901 implementation in Sionna, it is currently not tested and only lsp_log_std and 
# lsp_log_mean are being verified

from sionna.phy.channel.tr38811 import utils   # The code to test
import unittest   # The test framework
from sionna.phy.channel.tr38811 import Antenna, AntennaArray, DenseUrban, SubUrban, Urban, CDL
import numpy as np
import tensorflow as tf
import math

def create_ut_ant(carrier_frequency):
    ut_ant = Antenna(polarization="single",
                    polarization_type="V",
                    antenna_pattern="38.901",
                    carrier_frequency=carrier_frequency)
    return ut_ant

def create_bs_ant(carrier_frequency):
    bs_ant = AntennaArray(num_rows=1,
                            num_cols=4,
                            polarization="dual",
                            polarization_type="VH",
                            antenna_pattern="38.901",
                            carrier_frequency=carrier_frequency)
    return bs_ant


class Test_URB(unittest.TestCase):
# Values taken from Table 6.7.2-4a: Channel model parameters for Urban Scenario (NLOS) at S band and 
# Table 6.7.2-3a: Channel model parameters for Urban Scenario (LOS) at S band
    def test_s_band_10_degrees_dl(self):
        elevation_angle = 10.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)


        # DS, ASD, ASA, SF, K, ZSA, ZSD
        corr_matrix = channel_model._lsp_sampler._cross_lsp_correlation_matrix_sqrt
        #print("corr_matrix is ", corr_matrix)


        #corr_matrix_los = tf.boolean_mask(corr_matrix, channel_model._scenario.los)
        #corr_matrix_nlos = tf.boolean_mask(corr_matrix, channel_model._scenario.los == False)

        #print("corr_matrix_los are ", corr_matrix_los)
        #ASDvsDS = 0.4
        #corr_matrix_los = tf.math.square(corr_matrix_los)
        #print("new format is ", corr_matrix_nlos[:,2,0])
        #mean_ASDvsDS = tf.math.reduce_mean(corr_matrix_los[:,0,2])
        #print("mean_ASDvsDS ", mean_ASDvsDS)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.97
        sigma_DS_los = 1.0
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.18
        sigma_ASA_los = 0.74
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 31.83/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 13.84/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.63
        sigma_ZSA_los = 2.6

        mu_DS_nlos = -7.21
        sigma_DS_nlos = 1.19
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.17
        sigma_ASA_nlos = 2.97
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -0.97
        sigma_ZSA_nlos = 2.35

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_10_degrees_ul(self):
        elevation_angle = 10.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.97
        sigma_DS_los = 1.0
        mu_ASD_los = -2.6
        sigma_ASD_los = 0.79
        mu_ASA_los = 0.18
        sigma_ASA_los = 0.74
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 31.83/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 13.84/10.0
        mu_ZSD_los = -2.54
        sigma_ZSD_los = 2.62
        mu_ZSA_los = -0.63
        sigma_ZSA_los = 2.6

        mu_DS_nlos = -7.21
        sigma_DS_nlos = 1.19
        mu_ASD_nlos = -1.55
        sigma_ASD_nlos = 0.87
        mu_ASA_nlos = 0.17
        sigma_ASA_nlos = 2.97
        mu_ZSD_nlos = -2.86
        sigma_ZSD_nlos = 2.77
        mu_ZSA_nlos = -0.97
        sigma_ZSA_nlos = 2.35

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_20_degrees_dl(self):
        elevation_angle = 20.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.12
        sigma_DS_los = 0.83
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.42
        sigma_ASA_los = 0.9
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 18.78/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 13.78/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.15
        sigma_ZSA_los = 3.31

        mu_DS_nlos = -7.63
        sigma_DS_nlos = 0.98
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.32
        sigma_ASA_nlos = 2.99
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 0.49
        sigma_ZSA_nlos = 2.11

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_20_degrees_ul(self):
        elevation_angle = 20.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.12
        sigma_DS_los = 0.83
        mu_ASD_los = -2.48
        sigma_ASD_los = 0.8
        mu_ASA_los = 0.42
        sigma_ASA_los = 0.9
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 18.78/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 13.78/10.0
        mu_ZSD_los = -2.67
        sigma_ZSD_los = 2.96
        mu_ZSA_los = -0.15
        sigma_ZSA_los = 3.31

        mu_DS_nlos = -7.63
        sigma_DS_nlos = 0.98
        mu_ASD_nlos = -1.61
        sigma_ASD_nlos = 0.88
        mu_ASA_nlos = 0.32
        sigma_ASA_nlos = 2.99
        mu_ZSD_nlos = -2.64
        sigma_ZSD_nlos = 2.79
        mu_ZSA_nlos = 0.49
        sigma_ZSA_nlos = 2.11

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_30_degrees_dl(self):
        elevation_angle = 30.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.21
        sigma_DS_los = 0.68
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.41
        sigma_ASA_los = 1.3
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 10.49/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 10.42/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.54
        sigma_ZSA_los = 1.1

        mu_DS_nlos = -7.75
        sigma_DS_nlos = 0.84
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.52
        sigma_ASA_nlos = 2.71
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.03
        sigma_ZSA_nlos = 1.29

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_30_degrees_ul(self):
        elevation_angle = 30.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.21
        sigma_DS_los = 0.68
        mu_ASD_los = -2.44
        sigma_ASD_los = 0.91
        mu_ASA_los = 0.41
        sigma_ASA_los = 1.3
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 10.49/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 10.42/10.0
        mu_ZSD_los = -2.03
        sigma_ZSD_los = 0.86
        mu_ZSA_los = 0.54
        sigma_ZSA_los = 1.1

        mu_DS_nlos = -7.75
        sigma_DS_nlos = 0.84
        mu_ASD_nlos = -1.73
        sigma_ASD_nlos = 1.15
        mu_ASA_nlos = 0.52
        sigma_ASA_nlos = 2.71
        mu_ZSD_nlos = -2.05
        sigma_ZSD_nlos = 1.53
        mu_ZSA_nlos = 1.03
        sigma_ZSA_nlos = 1.29
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_40_degrees_dl(self):
        elevation_angle = 40.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.31
        sigma_DS_los = 0.48
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.18
        sigma_ASA_los = 1.69
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.46/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 8.01/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.35
        sigma_ZSA_los = 1.59

        mu_DS_nlos = -7.97
        sigma_DS_nlos = 0.73
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.61
        sigma_ASA_nlos = 2.26
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.12
        sigma_ZSA_nlos = 1.45

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_40_degrees_ul(self):
        elevation_angle = 40.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.31
        sigma_DS_los = 0.48
        mu_ASD_los = -2.6
        sigma_ASD_los = 1.02
        mu_ASA_los = 0.18
        sigma_ASA_los = 1.69
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.46/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 8.01/10.0
        mu_ZSD_los = -2.28
        sigma_ZSD_los = 1.19
        mu_ZSA_los = 0.35
        sigma_ZSA_los = 1.59

        mu_DS_nlos = -7.97
        sigma_DS_nlos = 0.73
        mu_ASD_nlos = -1.95
        sigma_ASD_nlos = 1.13
        mu_ASA_nlos = 0.61
        sigma_ASA_nlos = 2.26
        mu_ZSD_nlos = -2.18
        sigma_ZSD_nlos = 1.67
        mu_ZSA_nlos = 1.12
        sigma_ZSA_nlos = 1.45
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_50_degrees_dl(self):
        elevation_angle = 50.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.37
        sigma_DS_los = 0.38
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.07
        sigma_ASA_los = 2.04
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.52/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 8.27/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.27
        sigma_ZSA_los = 1.62

        mu_DS_nlos = -7.99
        sigma_DS_nlos = 0.73
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.68
        sigma_ASA_nlos = 2.08
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.3
        sigma_ZSA_nlos = 1.07

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_50_degrees_ul(self):
        elevation_angle = 50.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.37
        sigma_DS_los = 0.38
        mu_ASD_los = -2.71
        sigma_ASD_los = 1.17
        mu_ASA_los = -0.07
        sigma_ASA_los = 2.04
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.52/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 8.27/10.0
        mu_ZSD_los = -2.48
        sigma_ZSD_los = 1.4
        mu_ZSA_los = 0.27
        sigma_ZSA_los = 1.62

        mu_DS_nlos = -7.99
        sigma_DS_nlos = 0.73
        mu_ASD_nlos = -1.94
        sigma_ASD_nlos = 1.21
        mu_ASA_nlos = 0.68
        sigma_ASA_nlos = 2.08
        mu_ZSD_nlos = -2.24
        sigma_ZSD_nlos = 1.95
        mu_ZSA_nlos = 1.3
        sigma_ZSA_nlos = 1.07
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_60_degrees_dl(self):
        elevation_angle = 60.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.39
        sigma_DS_los = 0.24
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.43
        sigma_ASA_los = 2.54
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.47/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 7.26/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.26
        sigma_ZSA_los = 0.97

        mu_DS_nlos = -8.01
        sigma_DS_nlos = 0.72
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.64
        sigma_ASA_nlos = 1.93
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.32
        sigma_ZSA_nlos = 1.2

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_60_degrees_ul(self):
        elevation_angle = 60.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.39
        sigma_DS_los = 0.24
        mu_ASD_los = -2.78
        sigma_ASD_los = 1.2
        mu_ASA_los = -0.43
        sigma_ASA_los = 2.54
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.47/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 7.26/10.0
        mu_ZSD_los = -2.56
        sigma_ZSD_los = 0.85
        mu_ZSA_los = 0.26
        sigma_ZSA_los = 0.97

        mu_DS_nlos = -8.01
        sigma_DS_nlos = 0.72
        mu_ASD_nlos = -1.88
        sigma_ASD_nlos = 0.99
        mu_ASA_nlos = 0.64
        sigma_ASA_nlos = 1.93
        mu_ZSD_nlos = -2.21
        sigma_ZSD_nlos = 1.87
        mu_ZSA_nlos = 1.32
        sigma_ZSA_nlos = 1.2
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_70_degrees_dl(self):
        elevation_angle = 70.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.38
        sigma_DS_los = 0.18
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.64
        sigma_ASA_los = 2.47
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.54/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 5.53/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.12
        sigma_ZSA_los = 1.99

        mu_DS_nlos = -8.09
        sigma_DS_nlos = 0.71
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.58
        sigma_ASA_nlos = 1.71
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.35
        sigma_ZSA_nlos = 1.1

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_70_degrees_ul(self):
        elevation_angle = 70.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.38
        sigma_DS_los = 0.18
        mu_ASD_los = -2.78
        sigma_ASD_los = 1.2
        mu_ASA_los = -0.64
        sigma_ASA_los = 2.47
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.54/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 5.53/10.0
        mu_ZSD_los = -2.96
        sigma_ZSD_los = 1.61
        mu_ZSA_los = -0.12
        sigma_ZSA_los = 1.99

        mu_DS_nlos = -8.09
        sigma_DS_nlos = 0.71
        mu_ASD_nlos = -2.1
        sigma_ASD_nlos = 1.77
        mu_ASA_nlos = 0.58
        sigma_ASA_nlos = 1.71
        mu_ZSD_nlos = -2.69
        sigma_ZSD_nlos = 2.72
        mu_ZSA_nlos = 1.35
        sigma_ZSA_nlos = 1.1
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_80_degrees_dl(self):
        elevation_angle = 80.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.35
        sigma_DS_los = 0.13
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.91
        sigma_ASA_los = 2.69
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.03/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.49/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.21
        sigma_ZSA_los = 1.82

        mu_DS_nlos = -7.97
        sigma_DS_nlos = 0.78
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.71
        sigma_ASA_nlos = 0.96
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.31
        sigma_ZSA_nlos = 1.35

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_80_degrees_ul(self):
        elevation_angle = 80.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.35
        sigma_DS_los = 0.13
        mu_ASD_los = -2.65
        sigma_ASD_los = 1.45
        mu_ASA_los = -0.91
        sigma_ASA_los = 2.69
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.03/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.49/10.0
        mu_ZSD_los = -3.08
        sigma_ZSD_los = 1.49
        mu_ZSA_los = -0.21
        sigma_ZSA_los = 1.82

        mu_DS_nlos = -7.97
        sigma_DS_nlos = 0.78
        mu_ASD_nlos = -1.8
        sigma_ASD_nlos = 1.54
        mu_ASA_nlos = 0.71
        sigma_ASA_nlos = 0.96
        mu_ZSD_nlos = -2.81
        sigma_ZSD_nlos = 2.98
        mu_ZSA_nlos = 1.31
        sigma_ZSA_nlos = 1.35
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_90_degrees_dl(self):
        elevation_angle = 90.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.34
        sigma_DS_los = 0.09
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.54
        sigma_ASA_los = 1.66
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 3.68/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.14/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.07
        sigma_ZSA_los = 1.43

        mu_DS_nlos = -8.17
        sigma_DS_nlos = 0.67
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.49
        sigma_ASA_nlos = 1.16
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.5
        sigma_ZSA_nlos = 0.56

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_90_degrees_ul(self):
        elevation_angle = 90.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.34
        sigma_DS_los = 0.09
        mu_ASD_los = -2.27
        sigma_ASD_los = 1.85
        mu_ASA_los = -0.54
        sigma_ASA_los = 1.66
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 3.68/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.14/10.0
        mu_ZSD_los = -3.0
        sigma_ZSD_los = 1.09
        mu_ZSA_los = -0.07
        sigma_ZSA_los = 1.43

        mu_DS_nlos = -8.17
        sigma_DS_nlos = 0.67
        mu_ASD_nlos = -1.77
        sigma_ASD_nlos = 1.4
        mu_ASA_nlos = 0.49
        sigma_ASA_nlos = 1.16
        mu_ZSD_nlos = -4.29
        sigma_ZSD_nlos = 4.37
        mu_ZSA_nlos = 1.5
        sigma_ZSA_nlos = 0.56
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    # Values from tables Table 6.7.2-2b: Channel model parameters for Dense Urban Scenario (NLOS) in Ka band
    # and Table 6.7.2-5b: Channel model parameters for Suburban Scenario (LOS) in Ka band

    def test_ka_band_10_degrees_dl(self):
        elevation_angle = 10.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        corr_matrix = channel_model._lsp_sampler._cross_lsp_correlation_matrix_sqrt

        #corr_matrix_los = tf.boolean_mask(corr_matrix, channel_model._scenario.los)
        #corr_matrix_nlos = tf.boolean_mask(corr_matrix, channel_model._scenario.los == False)

        #print("corr_matrix_los are ", corr_matrix_los)
        #ASDvsDS = 0.4
        #corr_matrix_los = tf.math.square(corr_matrix_los)
        #print("new format is ", corr_matrix_nlos[:,2,0])
        #mean_ASDvsDS = tf.math.reduce_mean(corr_matrix_los[:,0,2])
        #print("mean_ASDvsDS ", mean_ASDvsDS)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.52
        sigma_DS_los = 0.92
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.4
        sigma_ASA_los = 0.77
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 40.18/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 16.99/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.67
        sigma_ZSA_los = 2.22

        mu_DS_nlos = -7.24
        sigma_DS_nlos = 1.26
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.13
        sigma_ASA_nlos = 2.99
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.13
        sigma_ZSA_nlos = 2.66

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_10_degrees_ul(self):
        elevation_angle = 10.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.52
        sigma_DS_los = 0.92
        mu_ASD_los = -3.18
        sigma_ASD_los = 0.79
        mu_ASA_los = -0.4
        sigma_ASA_los = 0.77
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 40.18/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 16.99/10.0
        mu_ZSD_los = -2.61
        sigma_ZSD_los = 2.41
        mu_ZSA_los = -0.67
        sigma_ZSA_los = 2.22

        mu_DS_nlos = -7.24
        sigma_DS_nlos = 1.26
        mu_ASD_nlos = -1.58
        sigma_ASD_nlos = 0.89
        mu_ASA_nlos = 0.13
        sigma_ASA_nlos = 2.99
        mu_ZSD_nlos = -2.87
        sigma_ZSD_nlos = 2.76
        mu_ZSA_nlos = -1.13
        sigma_ZSA_nlos = 2.66

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_20_degrees_dl(self):
        elevation_angle = 20.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.59
        sigma_DS_los = 0.79
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.15
        sigma_ASA_los = 0.97
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 23.62/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 18.96/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.34
        sigma_ZSA_los = 3.04

        mu_DS_nlos = -7.7
        sigma_DS_nlos = 0.99
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.19
        sigma_ASA_nlos = 3.12
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 0.49
        sigma_ZSA_nlos = 2.03

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_20_degrees_ul(self):
        elevation_angle = 20.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.59
        sigma_DS_los = 0.79
        mu_ASD_los = -3.05
        sigma_ASD_los = 0.87
        mu_ASA_los = -0.15
        sigma_ASA_los = 0.97
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 23.62/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 18.96/10.0
        mu_ZSD_los = -2.82
        sigma_ZSD_los = 2.59
        mu_ZSA_los = -0.34
        sigma_ZSA_los = 3.04

        mu_DS_nlos = -7.7
        sigma_DS_nlos = 0.99
        mu_ASD_nlos = -1.67
        sigma_ASD_nlos = 0.89
        mu_ASA_nlos = 0.19
        sigma_ASA_nlos = 3.12
        mu_ZSD_nlos = -2.68
        sigma_ZSD_nlos = 2.76
        mu_ZSA_nlos = 0.49
        sigma_ZSA_nlos = 2.03

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_30_degrees_dl(self):
        elevation_angle = 30.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.51
        sigma_DS_los = 0.65
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.18
        sigma_ASA_los = 1.58
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.48/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 14.23/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.07
        sigma_ZSA_los = 1.33

        mu_DS_nlos = -7.82
        sigma_DS_nlos = 0.86
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.44
        sigma_ASA_nlos = 2.69
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 0.95
        sigma_ZSA_nlos = 1.54

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_30_degrees_ul(self):
        elevation_angle = 30.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.51
        sigma_DS_los = 0.65
        mu_ASD_los = -2.98
        sigma_ASD_los = 1.04
        mu_ASA_los = -0.18
        sigma_ASA_los = 1.58
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.48/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 14.23/10.0
        mu_ZSD_los = -2.48
        sigma_ZSD_los = 1.02
        mu_ZSA_los = 0.07
        sigma_ZSA_los = 1.33

        mu_DS_nlos = -7.82
        sigma_DS_nlos = 0.86
        mu_ASD_nlos = -1.84
        sigma_ASD_nlos = 1.3
        mu_ASA_nlos = 0.44
        sigma_ASA_nlos = 2.69
        mu_ZSD_nlos = -2.12
        sigma_ZSD_nlos = 1.54
        mu_ZSA_nlos = 0.95
        sigma_ZSA_nlos = 1.54
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_40_degrees_dl(self):
        elevation_angle = 40.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.49
        sigma_DS_los = 0.48
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.31
        sigma_ASA_los = 1.69
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 8.56/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 11.06/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.08
        sigma_ZSA_los = 1.45

        mu_DS_nlos = -8.04
        sigma_DS_nlos = 0.75
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.48
        sigma_ASA_nlos = 2.45
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.15
        sigma_ZSA_nlos = 1.02

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_40_degrees_ul(self):
        elevation_angle = 40.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.49
        sigma_DS_los = 0.48
        mu_ASD_los = -3.11
        sigma_ASD_los = 1.06
        mu_ASA_los = -0.31
        sigma_ASA_los = 1.69
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 8.56/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 11.06/10.0
        mu_ZSD_los = -2.76
        sigma_ZSD_los = 1.27
        mu_ZSA_los = -0.08
        sigma_ZSA_los = 1.45

        mu_DS_nlos = -8.04
        sigma_DS_nlos = 0.75
        mu_ASD_nlos = -2.02
        sigma_ASD_nlos = 1.15
        mu_ASA_nlos = 0.48
        sigma_ASA_nlos = 2.45
        mu_ZSD_nlos = -2.27
        sigma_ZSD_nlos = 1.77
        mu_ZSA_nlos = 1.15
        sigma_ZSA_nlos = 1.02
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_50_degrees_dl(self):
        elevation_angle = 50.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.48
        sigma_DS_los = 0.46
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.58
        sigma_ASA_los = 2.13
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.42/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 11.21/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.21
        sigma_ZSA_los = 1.62

        mu_DS_nlos = -8.08
        sigma_DS_nlos = 0.77
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.56
        sigma_ASA_nlos = 2.17
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.14
        sigma_ZSA_nlos = 1.61

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_50_degrees_ul(self):
        elevation_angle = 50.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.48
        sigma_DS_los = 0.46
        mu_ASD_los = -3.19
        sigma_ASD_los = 1.12
        mu_ASA_los = -0.58
        sigma_ASA_los = 2.13
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.42/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 11.21/10.0
        mu_ZSD_los = -2.93
        sigma_ZSD_los = 1.38
        mu_ZSA_los = -0.21
        sigma_ZSA_los = 1.62

        mu_DS_nlos = -8.08
        sigma_DS_nlos = 0.77
        mu_ASD_nlos = -2.06
        sigma_ASD_nlos = 1.23
        mu_ASA_nlos = 0.56
        sigma_ASA_nlos = 2.17
        mu_ZSD_nlos = -2.5
        sigma_ZSD_nlos = 2.36
        mu_ZSA_nlos = 1.14
        sigma_ZSA_nlos = 1.61
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_60_degrees_dl(self):
        elevation_angle = 60.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.44
        sigma_DS_los = 0.34
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.9
        sigma_ASA_los = 2.51
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.97/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 9.47/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.25
        sigma_ZSA_los = 1.06

        mu_DS_nlos = -8.1
        sigma_DS_nlos = 0.76
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.55
        sigma_ASA_nlos = 1.93
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.13
        sigma_ZSA_nlos = 1.84

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_60_degrees_ul(self):
        elevation_angle = 60.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.44
        sigma_DS_los = 0.34
        mu_ASD_los = -3.25
        sigma_ASD_los = 1.14
        mu_ASA_los = -0.9
        sigma_ASA_los = 2.51
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.97/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 9.47/10.0
        mu_ZSD_los = -3.05
        sigma_ZSD_los = 0.96
        mu_ZSA_los = -0.25
        sigma_ZSA_los = 1.06

        mu_DS_nlos = -8.1
        sigma_DS_nlos = 0.76
        mu_ASD_nlos = -1.99
        sigma_ASD_nlos = 1.02
        mu_ASA_nlos = 0.55
        sigma_ASA_nlos = 1.93
        mu_ZSD_nlos = -2.47
        sigma_ZSD_nlos = 2.33
        mu_ZSA_nlos = 1.13
        sigma_ZSA_nlos = 1.84
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_70_degrees_dl(self):
        elevation_angle = 70.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.4
        sigma_DS_los = 0.27
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -1.16
        sigma_ASA_los = 2.47
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.88/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 7.24/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.61
        sigma_ZSA_los = 1.88

        mu_DS_nlos = -8.16
        sigma_DS_nlos = 0.73
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.48
        sigma_ASA_nlos = 1.72
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.16
        sigma_ZSA_nlos = 1.81

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_70_degrees_ul(self):
        elevation_angle = 70.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.4
        sigma_DS_los = 0.27
        mu_ASD_los = -3.33
        sigma_ASD_los = 1.25
        mu_ASA_los = -1.16
        sigma_ASA_los = 2.47
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.88/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 7.24/10.0
        mu_ZSD_los = -3.45
        sigma_ZSD_los = 1.51
        mu_ZSA_los = -0.61
        sigma_ZSA_los = 1.88

        mu_DS_nlos = -8.16
        sigma_DS_nlos = 0.73
        mu_ASD_nlos = -2.19
        sigma_ASD_nlos = 1.78
        mu_ASA_nlos = 0.48
        sigma_ASA_nlos = 1.72
        mu_ZSD_nlos = -2.83
        sigma_ZSD_nlos = 2.84
        mu_ZSA_nlos = 1.16
        sigma_ZSA_nlos = 1.81
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_80_degrees_dl(self):
        elevation_angle = 80.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.37
        sigma_DS_los = 0.19
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -1.48
        sigma_ASA_los = 2.61
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.22/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 5.79/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.79
        sigma_ZSA_los = 1.87

        mu_DS_nlos = -8.03
        sigma_DS_nlos = 0.79
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.53
        sigma_ASA_nlos = 1.51
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.28
        sigma_ZSA_nlos = 1.35

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_80_degrees_ul(self):
        elevation_angle = 80.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.37
        sigma_DS_los = 0.19
        mu_ASD_los = -3.22
        sigma_ASD_los = 1.35
        mu_ASA_los = -1.48
        sigma_ASA_los = 2.61
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.22/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 5.79/10.0
        mu_ZSD_los = -3.66
        sigma_ZSD_los = 1.49
        mu_ZSA_los = -0.79
        sigma_ZSA_los = 1.87

        mu_DS_nlos = -8.03
        sigma_DS_nlos = 0.79
        mu_ASD_nlos = -1.88
        sigma_ASD_nlos = 1.55
        mu_ASA_nlos = 0.53
        sigma_ASA_nlos = 1.51
        mu_ZSD_nlos = -2.82
        sigma_ZSD_nlos = 2.87
        mu_ZSA_nlos = 1.28
        sigma_ZSA_nlos = 1.35
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_90_degrees_dl(self):
        elevation_angle = 90.0

        direction = "downlink"
        scenario = "urb"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.35
        sigma_DS_los = 0.14
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -1.14
        sigma_ASA_los = 1.7
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 3.81/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.25/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -0.58
        sigma_ZSA_los = 1.19

        mu_DS_nlos = -8.33
        sigma_DS_nlos = 0.7
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.32
        sigma_ASA_nlos = 1.2
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.42
        sigma_ZSA_nlos = 0.6

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_90_degrees_ul(self):
        elevation_angle = 90.0

        direction = "uplink"
        scenario = "urb"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = Urban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.35
        sigma_DS_los = 0.14
        mu_ASD_los = -2.83
        sigma_ASD_los = 1.62
        mu_ASA_los = -1.14
        sigma_ASA_los = 1.7
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 3.81/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.25/10.0
        mu_ZSD_los = -3.56
        sigma_ZSD_los = 0.89
        mu_ZSA_los = -0.58
        sigma_ZSA_los = 1.19

        mu_DS_nlos = -8.33
        sigma_DS_nlos = 0.7
        mu_ASD_nlos = -2.0
        sigma_ASD_nlos = 1.4
        mu_ASA_nlos = 0.32
        sigma_ASA_nlos = 1.2
        mu_ZSD_nlos = -4.55
        sigma_ZSD_nlos = 4.27
        mu_ZSA_nlos = 1.42
        sigma_ZSA_nlos = 0.6
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

class Test_DUR(unittest.TestCase):
# Values taken from Table 6.7.2-4a: Channel model parameters for Urban Scenario (NLOS) at S band and 
# Table 6.7.2-3a: Channel model parameters for Urban Scenario (LOS) at S band
    def test_s_band_10_degrees_dl(self):
        elevation_angle = 10.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.12
        sigma_DS_los = 0.8
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.94
        sigma_ASA_los = 0.7
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.3/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.82
        sigma_ZSA_los = 0.03

        mu_DS_nlos = -6.84
        sigma_DS_nlos = 0.82
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.0
        sigma_ASA_nlos = 1.6
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.0
        sigma_ZSA_nlos = 0.63

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_10_degrees_ul(self):
        elevation_angle = 10.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.12
        sigma_DS_los = 0.8
        mu_ASD_los = -3.06
        sigma_ASD_los = 0.48
        mu_ASA_los = 0.94
        sigma_ASA_los = 0.7
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 4.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.3/10.0
        mu_ZSD_los = -2.52
        sigma_ZSD_los = 0.5
        mu_ZSA_los = 0.82
        sigma_ZSA_los = 0.03

        mu_DS_nlos = -6.84
        sigma_DS_nlos = 0.82
        mu_ASD_nlos = -2.08
        sigma_ASD_nlos = 0.87
        mu_ASA_nlos = 1.0
        sigma_ASA_nlos = 1.6
        mu_ZSD_nlos = -2.08
        sigma_ZSD_nlos = 0.58
        mu_ZSA_nlos = 1.0
        sigma_ZSA_nlos = 0.63

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_20_degrees_dl(self):
        elevation_angle = 20.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.28
        sigma_DS_los = 0.67
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.87
        sigma_ASA_los = 0.66
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 9.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.6/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.50
        sigma_ZSA_los = 0.09

        mu_DS_nlos = -6.81
        sigma_DS_nlos = 0.61
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.44
        sigma_ASA_nlos = 0.87
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 0.94
        sigma_ZSA_nlos = 0.65

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_20_degrees_ul(self):
        elevation_angle = 20.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.28
        sigma_DS_los = 0.67
        mu_ASD_los = -2.68
        sigma_ASD_los = 0.36
        mu_ASA_los = 0.87
        sigma_ASA_los = 0.66
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 9.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.6/10.0
        mu_ZSD_los = -2.29
        sigma_ZSD_los = 0.53
        mu_ZSA_los = 0.50
        sigma_ZSA_los = 0.09

        mu_DS_nlos = -6.81
        sigma_DS_nlos = 0.61
        mu_ASD_nlos = -1.68
        sigma_ASD_nlos = 0.73
        mu_ASA_nlos = 1.44
        sigma_ASA_nlos = 0.87
        mu_ZSD_nlos = -1.66
        sigma_ZSD_nlos = 0.5
        mu_ZSA_nlos = 0.94
        sigma_ZSA_nlos = 0.65

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_30_degrees_dl(self):
        elevation_angle = 30.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.45
        sigma_DS_los = 0.68
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.92
        sigma_ASA_los = 0.68
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 9.3/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.1/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.82
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -6.94
        sigma_DS_nlos = 0.49
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.54
        sigma_ASA_nlos = 0.64
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.15
        sigma_ZSA_nlos = 0.42

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_30_degrees_ul(self):
        elevation_angle = 30.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -7.45
        sigma_DS_los = 0.68
        mu_ASD_los = -2.51
        sigma_ASD_los = 0.38
        mu_ASA_los = 0.92
        sigma_ASA_los = 0.68
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 9.3/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.1/10.0
        mu_ZSD_los = -2.19
        sigma_ZSD_los = 0.58
        mu_ZSA_los = 0.82
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -6.94
        sigma_DS_nlos = 0.49
        mu_ASD_nlos = -1.43
        sigma_ASD_nlos = 0.5
        mu_ASA_nlos = 1.54
        sigma_ASA_nlos = 0.64
        mu_ZSD_nlos = -1.48
        sigma_ZSD_nlos = 0.4
        mu_ZSA_nlos = 1.15
        sigma_ZSA_nlos = 0.42
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_40_degrees_dl(self):
        elevation_angle = 40.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.73
        sigma_DS_los = 0.66
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.79
        sigma_ASA_los = 0.64
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.0/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.23
        sigma_ZSA_los = 0.03

        mu_DS_nlos = -7.14
        sigma_DS_nlos = 0.49
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.53
        sigma_ASA_nlos = 0.56
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.35
        sigma_ZSA_nlos = 0.28

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_40_degrees_ul(self):
        elevation_angle = 40.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -7.73
        sigma_DS_los = 0.66
        mu_ASD_los = -2.40
        sigma_ASD_los = 0.32
        mu_ASA_los = 0.79
        sigma_ASA_los = 0.64
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.0/10.0
        mu_ZSD_los = -2.24
        sigma_ZSD_los = 0.51
        mu_ZSA_los = 1.23
        sigma_ZSA_los = 0.03

        mu_DS_nlos = -7.14
        sigma_DS_nlos = 0.49
        mu_ASD_nlos = -1.43
        sigma_ASD_nlos = 0.5
        mu_ASA_nlos = 1.53
        sigma_ASA_nlos = 0.56
        mu_ZSD_nlos = -1.46
        sigma_ZSD_nlos = 0.37
        mu_ZSA_nlos = 1.35
        sigma_ZSA_nlos = 0.28
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_50_degrees_dl(self):
        elevation_angle = 50.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.91
        sigma_DS_los = 0.62
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.72
        sigma_ASA_los = 0.63
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.0/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.43
        sigma_ZSA_los = 0.06

        mu_DS_nlos = -7.34
        sigma_DS_nlos = 0.51
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.48
        sigma_ASA_nlos = 0.54
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.44
        sigma_ZSA_nlos = 0.25

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_50_degrees_ul(self):
        elevation_angle = 50.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -7.91
        sigma_DS_los = 0.62
        mu_ASD_los = -2.31
        sigma_ASD_los = 0.33
        mu_ASA_los = 0.72
        sigma_ASA_los = 0.63
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.0/10.0
        mu_ZSD_los = -2.3
        sigma_ZSD_los = 0.46
        mu_ZSA_los = 1.43
        sigma_ZSA_los = 0.06

        mu_DS_nlos = -7.34
        sigma_DS_nlos = 0.51
        mu_ASD_nlos = -1.44
        sigma_ASD_nlos = 0.58
        mu_ASA_nlos = 1.48
        sigma_ASA_nlos = 0.54
        mu_ZSD_nlos = -1.53
        sigma_ZSD_nlos = 0.47
        mu_ZSA_nlos = 1.44
        sigma_ZSA_nlos = 0.25
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_60_degrees_dl(self):
        elevation_angle = 60.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.14
        sigma_DS_los = 0.51
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.6
        sigma_ASA_los = 0.54
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.6/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.56
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -7.53
        sigma_DS_nlos = 0.47
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.39
        sigma_ASA_nlos = 0.68
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.56
        sigma_ZSA_nlos = 0.16

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_60_degrees_ul(self):
        elevation_angle = 60.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.14
        sigma_DS_los = 0.51
        mu_ASD_los = -2.20
        sigma_ASD_los = 0.39
        mu_ASA_los = 0.6
        sigma_ASA_los = 0.54
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.6/10.0
        mu_ZSD_los = -2.48
        sigma_ZSD_los = 0.35
        mu_ZSA_los = 1.56
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -7.53
        sigma_DS_nlos = 0.47
        mu_ASD_nlos = -1.33
        sigma_ASD_nlos = 0.49
        mu_ASA_nlos = 1.39
        sigma_ASA_nlos = 0.68
        mu_ZSD_nlos = -1.61
        sigma_ZSD_nlos = 0.43
        mu_ZSA_nlos = 1.56
        sigma_ZSA_nlos = 0.16
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_70_degrees_dl(self):
        elevation_angle = 70.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.23
        sigma_DS_los = 0.45
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.55
        sigma_ASA_los = 0.52
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.2/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.66
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -7.67
        sigma_DS_nlos = 0.44
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.42
        sigma_ASA_nlos = 0.55
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.64
        sigma_ZSA_nlos = 0.18

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_70_degrees_ul(self):
        elevation_angle = 70.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.23
        sigma_DS_los = 0.45
        mu_ASD_los = -2.00
        sigma_ASD_los = 0.4
        mu_ASA_los = 0.55
        sigma_ASA_los = 0.52
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.2/10.0
        mu_ZSD_los = -2.64
        sigma_ZSD_los = 0.31
        mu_ZSA_los = 1.66
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -7.67
        sigma_DS_nlos = 0.44
        mu_ASD_nlos = -1.31
        sigma_ASD_nlos = 0.65
        mu_ASA_nlos = 1.42
        sigma_ASA_nlos = 0.55
        mu_ZSD_nlos = -1.77
        sigma_ZSD_nlos = 0.5
        mu_ZSA_nlos = 1.64
        sigma_ZSA_nlos = 0.18
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_80_degrees_dl(self):
        elevation_angle = 80.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.28
        sigma_DS_los = 0.31
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.71
        sigma_ASA_los = 0.53
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.5/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.1/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.73
        sigma_ZSA_los = 0.02

        mu_DS_nlos = -7.82
        sigma_DS_nlos = 0.42
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.38
        sigma_ASA_nlos = 0.6
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.70
        sigma_ZSA_nlos = 0.09

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_80_degrees_ul(self):
        elevation_angle = 80.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.28
        sigma_DS_los = 0.31
        mu_ASD_los = -1.64
        sigma_ASD_los = 0.32
        mu_ASA_los = 0.71
        sigma_ASA_los = 0.53
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.5/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.1/10.0
        mu_ZSD_los = -2.68
        sigma_ZSD_los = 0.39
        mu_ZSA_los = 1.73
        sigma_ZSA_los = 0.02

        mu_DS_nlos = -7.82
        sigma_DS_nlos = 0.42
        mu_ASD_nlos = -1.11
        sigma_ASD_nlos = 0.69
        mu_ASA_nlos = 1.38
        sigma_ASA_nlos = 0.6
        mu_ZSD_nlos = -1.90
        sigma_ZSD_nlos = 0.42
        mu_ZSA_nlos = 1.70
        sigma_ZSA_nlos = 0.09
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_90_degrees_dl(self):
        elevation_angle = 90.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.36
        sigma_DS_los = 0.08
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.81
        sigma_ASA_los = 0.62
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.8/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.9/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.79
        sigma_ZSA_los = 0.01

        mu_DS_nlos = -7.84
        sigma_DS_nlos = 0.55
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.23
        sigma_ASA_nlos = 0.6
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.7
        sigma_ZSA_nlos = 0.17

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_90_degrees_ul(self):
        elevation_angle = 90.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.36
        sigma_DS_los = 0.08
        mu_ASD_los = -0.63
        sigma_ASD_los = 0.53
        mu_ASA_los = 0.81
        sigma_ASA_los = 0.62
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.8/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.9/10.0
        mu_ZSD_los = -2.61
        sigma_ZSD_los = 0.28
        mu_ZSA_los = 1.79
        sigma_ZSA_los = 0.01

        mu_DS_nlos = -7.84
        sigma_DS_nlos = 0.55
        mu_ASD_nlos = -0.11
        sigma_ASD_nlos = 0.53
        mu_ASA_nlos = 1.23
        sigma_ASA_nlos = 0.6
        mu_ZSD_nlos = -1.99
        sigma_ZSD_nlos = 0.5
        mu_ZSA_nlos = 1.7
        sigma_ZSA_nlos = 0.17
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)
    
    # Values taken from Table 6.7.2-1b: Channel model parameters for Dense Urban Scenario (LOS) in Ka band and
    # Table 6.7.2-2b: Channel model parameters for Dense Urban Scenario (NLOS) in Ka band
    
    def test_ka_band_10_degrees_dl(self):
        elevation_angle = 10.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.43
        sigma_DS_los = 0.9
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.65
        sigma_ASA_los = 0.82
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.1/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.6/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.82
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -6.86
        sigma_DS_nlos = 0.81
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.02
        sigma_ASA_nlos = 1.44
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.01
        sigma_ZSA_nlos = 0.56

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_10_degrees_ul(self):
        elevation_angle = 10.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.43
        sigma_DS_los = 0.9
        mu_ASD_los = -3.43
        sigma_ASD_los = 0.54
        mu_ASA_los = 0.65
        sigma_ASA_los = 0.82
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.1/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.6/10.0
        mu_ZSD_los = -2.75
        sigma_ZSD_los = 0.55
        mu_ZSA_los = 0.82
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -6.86
        sigma_DS_nlos = 0.81
        mu_ASD_nlos = -2.12
        sigma_ASD_nlos = 0.94
        mu_ASA_nlos = 1.02
        sigma_ASA_nlos = 1.44
        mu_ZSD_nlos = -2.11
        sigma_ZSD_nlos = 0.59
        mu_ZSA_nlos = 1.01
        sigma_ZSA_nlos = 0.56

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_20_degrees_dl(self):
        elevation_angle = 20.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.62
        sigma_DS_los = 0.78
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.53
        sigma_ASA_los = 0.78
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 13.7/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.8/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.47
        sigma_ZSA_los = 0.11

        mu_DS_nlos = -6.84
        sigma_DS_nlos = 0.61
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.44
        sigma_ASA_nlos = 0.77
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 0.96
        sigma_ZSA_nlos = 0.55

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_20_degrees_ul(self):
        elevation_angle = 20.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.62
        sigma_DS_los = 0.78
        mu_ASD_los = -3.06
        sigma_ASD_los = 0.41
        mu_ASA_los = 0.53
        sigma_ASA_los = 0.78
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 13.7/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.8/10.0
        mu_ZSD_los = -2.64
        sigma_ZSD_los = 0.64
        mu_ZSA_los = 0.47
        sigma_ZSA_los = 0.11

        mu_DS_nlos = -6.84
        sigma_DS_nlos = 0.61
        mu_ASD_nlos = -1.74
        sigma_ASD_nlos = 0.79
        mu_ASA_nlos = 1.44
        sigma_ASA_nlos = 0.77
        mu_ZSD_nlos = -1.69
        sigma_ZSD_nlos = 0.51
        mu_ZSA_nlos = 0.96
        sigma_ZSA_nlos = 0.55

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_30_degrees_dl(self):
        elevation_angle = 30.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -7.76
        sigma_DS_los = 0.8
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.60
        sigma_ASA_los = 0.83
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.0/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.8
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -7.0
        sigma_DS_nlos = 0.56
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.48
        sigma_ASA_nlos = 0.7
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.13
        sigma_ZSA_nlos = 0.43

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_30_degrees_ul(self):
        elevation_angle = 30.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -7.76
        sigma_DS_los = 0.8
        mu_ASD_los = -2.91
        sigma_ASD_los = 0.42
        mu_ASA_los = 0.60
        sigma_ASA_los = 0.83
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.0/10.0
        mu_ZSD_los = -2.49
        sigma_ZSD_los = 0.69
        mu_ZSA_los = 0.8
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -7.0
        sigma_DS_nlos = 0.56
        mu_ASD_nlos = -1.56
        sigma_ASD_nlos = 0.66
        mu_ASA_nlos = 1.48
        sigma_ASA_nlos = 0.7
        mu_ZSD_nlos = -1.52
        sigma_ZSD_nlos = 0.46
        mu_ZSA_nlos = 1.13
        sigma_ZSA_nlos = 0.43
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_40_degrees_dl(self):
        elevation_angle = 40.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.02
        sigma_DS_los = 0.72
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.43
        sigma_ASA_los = 0.78
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 10.3/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.3/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.23
        sigma_ZSA_los = 0.04

        mu_DS_nlos = -7.21
        sigma_DS_nlos = 0.56
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.46
        sigma_ASA_nlos = 0.6
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.3
        sigma_ZSA_nlos = 0.37

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_40_degrees_ul(self):
        elevation_angle = 40.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.02
        sigma_DS_los = 0.72
        mu_ASD_los = -2.81
        sigma_ASD_los = 0.34
        mu_ASA_los = 0.43
        sigma_ASA_los = 0.78
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 10.3/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.3/10.0
        mu_ZSD_los = -2.51
        sigma_ZSD_los = 0.57
        mu_ZSA_los = 1.23
        sigma_ZSA_los = 0.04

        mu_DS_nlos = -7.21
        sigma_DS_nlos = 0.56
        mu_ASD_nlos = -1.54
        sigma_ASD_nlos = 0.63
        mu_ASA_nlos = 1.46
        sigma_ASA_nlos = 0.6
        mu_ZSD_nlos = -1.51
        sigma_ZSD_nlos = 0.43
        mu_ZSA_nlos = 1.3
        sigma_ZSA_nlos = 0.37
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_50_degrees_dl(self):
        elevation_angle = 50.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.13
        sigma_DS_los = 0.61
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.36
        sigma_ASA_los = 0.77
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 9.2/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.2/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.42
        sigma_ZSA_los = 0.1

        mu_DS_nlos = -7.42
        sigma_DS_nlos = 0.57
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.40
        sigma_ASA_nlos = 0.59
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.40
        sigma_ZSA_nlos = 0.32

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_50_degrees_ul(self):
        elevation_angle = 50.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.13
        sigma_DS_los = 0.61
        mu_ASD_los = -2.74
        sigma_ASD_los = 0.34
        mu_ASA_los = 0.36
        sigma_ASA_los = 0.77
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 9.2/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.2/10.0
        mu_ZSD_los = -2.54
        sigma_ZSD_los = 0.5
        mu_ZSA_los = 1.42
        sigma_ZSA_los = 0.1

        mu_DS_nlos = -7.42
        sigma_DS_nlos = 0.57
        mu_ASD_nlos = -1.45
        sigma_ASD_nlos = 0.56
        mu_ASA_nlos = 1.40
        sigma_ASA_nlos = 0.59
        mu_ZSD_nlos = -1.51
        sigma_ZSD_nlos = 0.43
        mu_ZSA_nlos = 1.40
        sigma_ZSA_nlos = 0.32
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_60_degrees_dl(self):
        elevation_angle = 60.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.3
        sigma_DS_los = 0.47
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.16
        sigma_ASA_los = 0.84
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 8.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.9/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.56
        sigma_ZSA_los = 0.06

        mu_DS_nlos = -7.86
        sigma_DS_nlos = 0.55
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.97
        sigma_ASA_nlos = 1.27
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.41
        sigma_ZSA_nlos = 0.45

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_60_degrees_ul(self):
        elevation_angle = 60.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.3
        sigma_DS_los = 0.47
        mu_ASD_los = -2.72
        sigma_ASD_los = 0.7
        mu_ASA_los = 0.16
        sigma_ASA_los = 0.84
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 8.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.9/10.0
        mu_ZSD_los = -2.71
        sigma_ZSD_los = 0.37
        mu_ZSA_los = 1.56
        sigma_ZSA_los = 0.06

        mu_DS_nlos = -7.86
        sigma_DS_nlos = 0.55
        mu_ASD_nlos = -1.64
        sigma_ASD_nlos = 0.78
        mu_ASA_nlos = 0.97
        sigma_ASA_nlos = 1.27
        mu_ZSD_nlos = -1.84
        sigma_ZSD_nlos = 0.63
        mu_ZSA_nlos = 1.41
        sigma_ZSA_nlos = 0.45

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_70_degrees_dl(self):
        elevation_angle = 70.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.34
        sigma_DS_los = 0.39
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.18
        sigma_ASA_los = 0.64
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 8.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.5/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.65
        sigma_ZSA_los = 0.07

        mu_DS_nlos = -7.76
        sigma_DS_nlos = 0.47
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.33
        sigma_ASA_nlos = 0.56
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.63
        sigma_ZSA_nlos = 0.17

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_70_degrees_ul(self):
        elevation_angle = 70.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.34
        sigma_DS_los = 0.39
        mu_ASD_los = -2.46
        sigma_ASD_los = 0.4
        mu_ASA_los = 0.18
        sigma_ASA_los = 0.64
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 8.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.5/10.0
        mu_ZSD_los = -2.85
        sigma_ZSD_los = 0.31
        mu_ZSA_los = 1.65
        sigma_ZSA_los = 0.07

        mu_DS_nlos = -7.76
        sigma_DS_nlos = 0.47
        mu_ASD_nlos = -1.37
        sigma_ASD_nlos = 0.56
        mu_ASA_nlos = 1.33
        sigma_ASA_nlos = 0.56
        mu_ZSD_nlos = -1.86
        sigma_ZSD_nlos = 0.51
        mu_ZSA_nlos = 1.63
        sigma_ZSA_nlos = 0.17
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_80_degrees_dl(self):
        elevation_angle = 80.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.39
        sigma_DS_los = 0.26
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.24
        sigma_ASA_los = 0.81
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.6/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.73
        sigma_ZSA_los = 0.02

        mu_DS_nlos = -8.07
        sigma_DS_nlos = 0.42
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.12
        sigma_ASA_nlos = 1.04
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.68
        sigma_ZSA_nlos = 0.14

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_80_degrees_ul(self):
        elevation_angle = 80.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.39
        sigma_DS_los = 0.26
        mu_ASD_los = -2.30
        sigma_ASD_los = 0.78
        mu_ASA_los = 0.24
        sigma_ASA_los = 0.81
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.6/10.0
        mu_ZSD_los = -3.01
        sigma_ZSD_los = 0.45
        mu_ZSA_los = 1.73
        sigma_ZSA_los = 0.02

        mu_DS_nlos = -8.07
        sigma_DS_nlos = 0.42
        mu_ASD_nlos = -1.29
        sigma_ASD_nlos = 0.76
        mu_ASA_nlos = 1.12
        sigma_ASA_nlos = 1.04
        mu_ZSD_nlos = -2.16
        sigma_ZSD_nlos = 0.74
        mu_ZSA_nlos = 1.68
        sigma_ZSA_nlos = 0.14
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_90_degrees_dl(self):
        elevation_angle = 90.0

        direction = "downlink"
        scenario = "dur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.45
        sigma_DS_los = 0.01
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.36
        sigma_ASA_los = 0.65
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.6/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.3/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.79
        sigma_ZSA_los = 0.01

        mu_DS_nlos = -7.95
        sigma_DS_nlos = 0.59
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.04
        sigma_ASA_nlos = 0.63
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.7
        sigma_ZSA_nlos = 0.17

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_90_degrees_ul(self):
        elevation_angle = 90.0

        direction = "uplink"
        scenario = "dur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = DenseUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.45
        sigma_DS_los = 0.01
        mu_ASD_los = -1.11
        sigma_ASD_los = 0.51
        mu_ASA_los = 0.36
        sigma_ASA_los = 0.65
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.6/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.3/10.0
        mu_ZSD_los = -3.08
        sigma_ZSD_los = 0.27
        mu_ZSA_los = 1.79
        sigma_ZSA_los = 0.01

        mu_DS_nlos = -7.95
        sigma_DS_nlos = 0.59
        mu_ASD_nlos = -0.41
        sigma_ASD_nlos = 0.59
        mu_ASA_nlos = 1.04
        sigma_ASA_nlos = 0.63
        mu_ZSD_nlos = -2.21
        sigma_ZSD_nlos = 0.61
        mu_ZSA_nlos = 1.7
        sigma_ZSA_nlos = 0.17
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)
    
class Test_SUR(unittest.TestCase):
# Values taken Table 6.7.2-5a: Channel model parameters for Suburban Scenario (LOS) in S band and 
# Table 6.7.2-6a: Channel model parameters for Suburban Scenario (NLOS) in S band
    def test_s_band_10_degrees_dl(self):
        elevation_angle = 10.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.16
        sigma_DS_los = 0.99
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.05
        sigma_ASA_los = 1.84
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 11.40/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.26/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.78
        sigma_ZSA_los = 0.62

        mu_DS_nlos = -7.91
        sigma_DS_nlos = 1.42
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.91
        sigma_ASA_nlos = 1.7
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.9
        sigma_ZSA_nlos = 1.63

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_10_degrees_ul(self):
        elevation_angle = 10.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.16
        sigma_DS_los = 0.99
        mu_ASD_los = -3.57
        sigma_ASD_los = 1.62
        mu_ASA_los = 0.05
        sigma_ASA_los = 1.84
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 11.40/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 6.26/10.0
        mu_ZSD_los = -1.06
        sigma_ZSD_los = 0.96
        mu_ZSA_los = -1.78
        sigma_ZSA_los = 0.62

        mu_DS_nlos = -7.91
        sigma_DS_nlos = 1.42
        mu_ASD_nlos = -3.54
        sigma_ASD_nlos = 1.8
        mu_ASA_nlos = 0.91
        sigma_ASA_nlos = 1.7
        mu_ZSD_nlos = -2.01
        sigma_ZSD_nlos = 1.79
        mu_ZSA_nlos = -1.9
        sigma_ZSA_nlos = 1.63

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_20_degrees_dl(self):
        elevation_angle = 20.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.56
        sigma_DS_los = 0.96
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.38
        sigma_ASA_los = 1.94
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 19.45/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 10.32/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.84
        sigma_ZSA_los = 0.81

        mu_DS_nlos = -8.39
        sigma_DS_nlos = 1.46
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.70
        sigma_ASA_nlos = 1.33
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.70
        sigma_ZSA_nlos = 1.24

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_20_degrees_ul(self):
        elevation_angle = 20.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.56
        sigma_DS_los = 0.96
        mu_ASD_los = -3.80
        sigma_ASD_los = 1.74
        mu_ASA_los = -0.38
        sigma_ASA_los = 1.94
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 19.45/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 10.32/10.0
        mu_ZSD_los = -1.21
        sigma_ZSD_los = 0.95
        mu_ZSA_los = -1.84
        sigma_ZSA_los = 0.81

        mu_DS_nlos = -8.39
        sigma_DS_nlos = 1.46
        mu_ASD_nlos = -3.63
        sigma_ASD_nlos = 1.43
        mu_ASA_nlos = 0.70
        sigma_ASA_nlos = 1.33
        mu_ZSD_nlos = -1.67
        sigma_ZSD_nlos = 1.31
        mu_ZSA_nlos = -1.70
        sigma_ZSA_nlos = 1.24

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_30_degrees_dl(self):
        elevation_angle = 30.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.72
        sigma_DS_los = 0.79
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.56
        sigma_ASA_los = 1.75
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 20.80/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 16.34/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.67
        sigma_ZSA_los = 0.57

        mu_DS_nlos = -8.69
        sigma_DS_nlos = 1.46
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.38
        sigma_ASA_nlos = 1.52
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.75
        sigma_ZSA_nlos = 1.54

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_30_degrees_ul(self):
        elevation_angle = 30.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.72
        sigma_DS_los = 0.79
        mu_ASD_los = -3.77
        sigma_ASD_los = 1.72
        mu_ASA_los = -0.56
        sigma_ASA_los = 1.75
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 20.80/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 16.34/10.0
        mu_ZSD_los = -1.28
        sigma_ZSD_los = 0.49
        mu_ZSA_los = -1.67
        sigma_ZSA_los = 0.57

        mu_DS_nlos = -8.69
        sigma_DS_nlos = 1.46
        mu_ASD_nlos = -3.66
        sigma_ASD_nlos = 1.68
        mu_ASA_nlos = 0.38
        sigma_ASA_nlos = 1.52
        mu_ZSD_nlos = -1.75
        sigma_ZSD_nlos = 1.42
        mu_ZSA_nlos = -1.75
        sigma_ZSA_nlos = 1.54
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_40_degrees_dl(self):
        elevation_angle = 40.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.71
        sigma_DS_los = 0.81
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.59
        sigma_ASA_los = 1.82
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 21.20/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 15.63/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.59
        sigma_ZSA_los = 0.86

        mu_DS_nlos = -8.59
        sigma_DS_nlos = 1.21
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.30
        sigma_ASA_nlos = 1.43
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.80
        sigma_ZSA_nlos = 1.25

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_40_degrees_ul(self):
        elevation_angle = 40.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.71
        sigma_DS_los = 0.81
        mu_ASD_los = -3.57
        sigma_ASD_los = 1.6
        mu_ASA_los = -0.59
        sigma_ASA_los = 1.82
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 21.20/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 15.63/10.0
        mu_ZSD_los = -1.32
        sigma_ZSD_los = 0.79
        mu_ZSA_los = -1.59
        sigma_ZSA_los = 0.86

        mu_DS_nlos = -8.59
        sigma_DS_nlos = 1.21
        mu_ASD_nlos = -3.66
        sigma_ASD_nlos = 1.48
        mu_ASA_nlos = 0.30
        sigma_ASA_nlos = 1.43
        mu_ZSD_nlos = -1.49
        sigma_ZSD_nlos = 1.28
        mu_ZSA_nlos = -1.80
        sigma_ZSA_nlos = 1.25
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_50_degrees_dl(self):
        elevation_angle = 50.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.72
        sigma_DS_los = 1.12
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.58
        sigma_ASA_los = 01.87
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 21.60/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 14.22/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.55
        sigma_ZSA_los = 1.05

        mu_DS_nlos = -8.64
        sigma_DS_nlos = 1.18
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.28
        sigma_ASA_nlos = 1.44
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.80
        sigma_ZSA_nlos = 1.21

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_50_degrees_ul(self):
        elevation_angle = 50.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.72
        sigma_DS_los = 1.12
        mu_ASD_los = -3.42
        sigma_ASD_los = 1.49
        mu_ASA_los = -0.58
        sigma_ASA_los = 01.87
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 21.60/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 14.22/10.0
        mu_ZSD_los = -1.39
        sigma_ZSD_los = 0.97
        mu_ZSA_los = -1.55
        sigma_ZSA_los = 1.05

        mu_DS_nlos = -8.64
        sigma_DS_nlos = 1.18
        mu_ASD_nlos = -3.66
        sigma_ASD_nlos = 1.55
        mu_ASA_nlos = 0.28
        sigma_ASA_nlos = 1.44
        mu_ZSD_nlos = -1.53
        sigma_ZSD_nlos = 1.4
        mu_ZSA_nlos = -1.80
        sigma_ZSA_nlos = 1.21
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_60_degrees_dl(self):
        elevation_angle = 60.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.66
        sigma_DS_los = 1.23
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.55
        sigma_ASA_los = 1.92
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 19.75/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 14.19/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.51
        sigma_ZSA_los = 1.23

        mu_DS_nlos = -8.74
        sigma_DS_nlos = 1.13
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.23
        sigma_ASA_nlos = 1.44
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.85
        sigma_ZSA_nlos = 1.2

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_60_degrees_ul(self):
        elevation_angle = 60.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.66
        sigma_DS_los = 1.23
        mu_ASD_los = -3.27
        sigma_ASD_los = 1.43
        mu_ASA_los = -0.55
        sigma_ASA_los = 1.92
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 19.75/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 14.19/10.0
        mu_ZSD_los = -1.36
        sigma_ZSD_los = 1.17
        mu_ZSA_los = -1.51
        sigma_ZSA_los = 1.23

        mu_DS_nlos = -8.74
        sigma_DS_nlos = 1.13
        mu_ASD_nlos = -3.57
        sigma_ASD_nlos = 1.38
        mu_ASA_nlos = 0.23
        sigma_ASA_nlos = 1.44
        mu_ZSD_nlos = -1.57
        sigma_ZSD_nlos = 1.24
        mu_ZSA_nlos = -1.85
        sigma_ZSA_nlos = 1.2
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_70_degrees_dl(self):
        elevation_angle = 70.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.38
        sigma_DS_los = 0.55
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.28
        sigma_ASA_los = 1.16
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.00/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 5.7/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.27
        sigma_ZSA_los = 0.54

        mu_DS_nlos = -8.98
        sigma_DS_nlos = 1.37
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.1
        sigma_ASA_nlos = 1.24
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.45
        sigma_ZSA_nlos = 1.38

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_70_degrees_ul(self):
        elevation_angle = 70.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.38
        sigma_DS_los = 0.55
        mu_ASD_los = -3.08
        sigma_ASD_los = 1.36
        mu_ASA_los = -0.28
        sigma_ASA_los = 1.16
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.00/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 5.7/10.0
        mu_ZSD_los = -1.08
        sigma_ZSD_los = 0.62
        mu_ZSA_los = -1.27
        sigma_ZSA_los = 0.54

        mu_DS_nlos = -8.98
        sigma_DS_nlos = 1.37
        mu_ASD_nlos = -3.18
        sigma_ASD_nlos = 1.62
        mu_ASA_nlos = 0.1
        sigma_ASA_nlos = 1.24
        mu_ZSD_nlos = -1.48
        sigma_ZSD_nlos = 0.98
        mu_ZSA_nlos = -1.45
        sigma_ZSA_nlos = 1.38
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_80_degrees_dl(self):
        elevation_angle = 80.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.34
        sigma_DS_los = 0.63
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.17
        sigma_ASA_los = 1.09
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.85/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 9.91/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.28
        sigma_ZSA_los = 0.67

        mu_DS_nlos = -9.28
        sigma_DS_nlos = 1.5
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.04
        sigma_ASA_nlos = 1.04
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.19
        sigma_ZSA_nlos = 1.58

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_80_degrees_ul(self):
        elevation_angle = 80.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.34
        sigma_DS_los = 0.63
        mu_ASD_los = -2.75
        sigma_ASD_los = 1.26
        mu_ASA_los = -0.17
        sigma_ASA_los = 1.09
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.85/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 9.91/10.0
        mu_ZSD_los = -1.31
        sigma_ZSD_los = 0.76
        mu_ZSA_los = -1.28
        sigma_ZSA_los = 0.67

        mu_DS_nlos = -9.28
        sigma_DS_nlos = 1.5
        mu_ASD_nlos = -2.71
        sigma_ASD_nlos = 1.63
        mu_ASA_nlos = 0.04
        sigma_ASA_nlos = 1.04
        mu_ZSD_nlos = -1.62
        sigma_ZSD_nlos = 0.88
        mu_ZSA_nlos = -1.19
        sigma_ZSA_nlos = 1.58
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_s_band_90_degrees_dl(self):
        elevation_angle = 90.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 2.2e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.34
        sigma_DS_los = 0.63
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.17
        sigma_ASA_los = 1.09
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.85/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 9.91/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = -1.28
        sigma_ZSA_los = 0.67

        mu_DS_nlos = -9.28
        sigma_DS_nlos = 1.5
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.04
        sigma_ASA_nlos = 1.04
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = -1.19
        sigma_ZSA_nlos = 1.58

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_s_band_90_degrees_ul(self):
        elevation_angle = 90.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 2.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.34
        sigma_DS_los = 0.63
        mu_ASD_los = -2.75
        sigma_ASD_los = 1.26
        mu_ASA_los = -0.17
        sigma_ASA_los = 1.09
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 12.85/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 9.91/10.0
        mu_ZSD_los = -1.31
        sigma_ZSD_los = 0.76
        mu_ZSA_los = -1.28
        sigma_ZSA_los = 0.67

        mu_DS_nlos = -9.28
        sigma_DS_nlos = 1.5
        mu_ASD_nlos = -2.71
        sigma_ASD_nlos = 1.63
        mu_ASA_nlos = 0.04
        sigma_ASA_nlos = 1.04
        mu_ZSD_nlos = -1.62
        sigma_ZSD_nlos = 0.88
        mu_ZSA_nlos = -1.19
        sigma_ZSA_nlos = 1.58
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_10_degrees_dl(self):
        elevation_angle = 10.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.07
        sigma_DS_los = 0.46
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.89
        sigma_ASA_los = 0.67
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 8.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.4/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.63
        sigma_ZSA_los = 0.35

        mu_DS_nlos = -7.43
        sigma_DS_nlos = 0.5
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.49
        sigma_ASA_nlos = 0.4
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 0.81
        sigma_ZSA_nlos = 0.36

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_10_degrees_ul(self):
        elevation_angle = 10.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.07
        sigma_DS_los = 0.46
        mu_ASD_los = -3.55
        sigma_ASD_los = 0.48
        mu_ASA_los = 0.89
        sigma_ASA_los = 0.67
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 8.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.4/10.0
        mu_ZSD_los = -3.37
        sigma_ZSD_los = 0.28
        mu_ZSA_los = 0.63
        sigma_ZSA_los = 0.35

        mu_DS_nlos = -7.43
        sigma_DS_nlos = 0.5
        mu_ASD_nlos = -2.89
        sigma_ASD_nlos = 0.41
        mu_ASA_nlos = 1.49
        sigma_ASA_nlos = 0.4
        mu_ZSD_nlos = -3.09
        sigma_ZSD_nlos = 0.32
        mu_ZSA_nlos = 0.81
        sigma_ZSA_nlos = 0.36

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_20_degrees_dl(self):
        elevation_angle = 20.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.61
        sigma_DS_los = 0.45
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.31
        sigma_ASA_los = 0.78
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 14.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.6/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 0.76
        sigma_ZSA_los = 0.3

        mu_DS_nlos = -7.63
        sigma_DS_nlos = 0.61
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.24
        sigma_ASA_nlos = 0.82
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.06
        sigma_ZSA_nlos = 0.41

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_20_degrees_ul(self):
        elevation_angle = 20.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.61
        sigma_DS_los = 0.45
        mu_ASD_los = -3.69
        sigma_ASD_los = 0.41
        mu_ASA_los = 0.31
        sigma_ASA_los = 0.78
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 14.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 4.6/10.0
        mu_ZSD_los = -3.28
        sigma_ZSD_los = 0.27
        mu_ZSA_los = 0.76
        sigma_ZSA_los = 0.3

        mu_DS_nlos = -7.63
        sigma_DS_nlos = 0.61
        mu_ASD_nlos = -2.76
        sigma_ASD_nlos = 0.41
        mu_ASA_nlos = 1.24
        sigma_ASA_nlos = 0.82
        mu_ZSD_nlos = -2.93
        sigma_ZSD_nlos = 0.47
        mu_ZSA_nlos = 1.06
        sigma_ZSA_nlos = 0.41

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_30_degrees_dl(self):
        elevation_angle = 30.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.72
        sigma_DS_los = 0.28
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = 0.02
        sigma_ASA_los = 0.75
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 11.3/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.7/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.11
        sigma_ZSA_los = 0.28

        mu_DS_nlos = -7.86
        sigma_DS_nlos = 0.56
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 1.06
        sigma_ASA_nlos = 0.71
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.12
        sigma_ZSA_nlos = 0.4

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_30_degrees_ul(self):
        elevation_angle = 30.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.72
        sigma_DS_los = 0.28
        mu_ASD_los = -3.59
        sigma_ASD_los = 0.41
        mu_ASA_los = 0.02
        sigma_ASA_los = 0.75
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 11.3/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.7/10.0
        mu_ZSD_los = -3.04
        sigma_ZSD_los = 0.26
        mu_ZSA_los = 1.11
        sigma_ZSA_los = 0.28

        mu_DS_nlos = -7.86
        sigma_DS_nlos = 0.56
        mu_ASD_nlos = -2.64
        sigma_ASD_nlos = 0.41
        mu_ASA_nlos = 1.06
        sigma_ASA_nlos = 0.71
        mu_ZSD_nlos = -2.91
        sigma_ZSD_nlos = 0.46
        mu_ZSA_nlos = 1.12
        sigma_ZSA_nlos = 0.4
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_40_degrees_dl(self):
        elevation_angle = 40.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.63
        sigma_DS_los = 0.17
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.10
        sigma_ASA_los = 0.65
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 9.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.5/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.37
        sigma_ZSA_los = 0.23

        mu_DS_nlos = -7.96
        sigma_DS_nlos = 0.58
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.91
        sigma_ASA_nlos = 0.55
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.14
        sigma_ZSA_nlos = 0.39

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_40_degrees_ul(self):
        elevation_angle = 40.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.63
        sigma_DS_los = 0.17
        mu_ASD_los = -3.38
        sigma_ASD_los = 0.35
        mu_ASA_los = -0.10
        sigma_ASA_los = 0.65
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 9.0/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.5/10.0
        mu_ZSD_los = -2.88
        sigma_ZSD_los = 0.21
        mu_ZSA_los = 1.37
        sigma_ZSA_los = 0.23

        mu_DS_nlos = -7.96
        sigma_DS_nlos = 0.58
        mu_ASD_nlos = -2.41
        sigma_ASD_nlos = 0.52
        mu_ASA_nlos = 0.91
        sigma_ASA_nlos = 0.55
        mu_ZSD_nlos = -2.78
        sigma_ZSD_nlos = 0.54
        mu_ZSA_nlos = 1.14
        sigma_ZSA_nlos = 0.39
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_50_degrees_dl(self):
        elevation_angle = 50.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.54
        sigma_DS_los = 0.14
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.19
        sigma_ASA_los = 0.55
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.5/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.0/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.53
        sigma_ZSA_los = 0.23

        mu_DS_nlos = -7.98
        sigma_DS_nlos = 0.59
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.98
        sigma_ASA_nlos = 0.58
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.29
        sigma_ZSA_nlos = 0.35

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_50_degrees_ul(self):
        elevation_angle = 50.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.54
        sigma_DS_los = 0.14
        mu_ASD_los = -3.23
        sigma_ASD_los = 0.35
        mu_ASA_los = -0.19
        sigma_ASA_los = 0.55
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 7.5/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 3.0/10.0
        mu_ZSD_los = -2.83
        sigma_ZSD_los = 0.18
        mu_ZSA_los = 1.53
        sigma_ZSA_los = 0.23

        mu_DS_nlos = -7.98
        sigma_DS_nlos = 0.59
        mu_ASD_nlos = -2.42
        sigma_ASD_nlos = 0.7
        mu_ASA_nlos = 0.98
        sigma_ASA_nlos = 0.58
        mu_ZSD_nlos = -2.70
        sigma_ZSD_nlos = 0.45
        mu_ZSA_nlos = 1.29
        sigma_ZSA_nlos = 0.35
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_60_degrees_dl(self):
        elevation_angle = 60.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.48
        sigma_DS_los = 0.15
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.54
        sigma_ASA_los = 0.96
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.6/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.6/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.65
        sigma_ZSA_los = 0.17

        mu_DS_nlos = -8.45
        sigma_DS_nlos = 0.47
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.49
        sigma_ASA_nlos = 1.37
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.38
        sigma_ZSA_nlos = 0.36

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_60_degrees_ul(self):
        elevation_angle = 60.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.48
        sigma_DS_los = 0.15
        mu_ASD_los = -3.19
        sigma_ASD_los = 0.43
        mu_ASA_los = -0.54
        sigma_ASA_los = 0.96
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 6.6/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 2.6/10.0
        mu_ZSD_los = -2.86
        sigma_ZSD_los = 0.17
        mu_ZSA_los = 1.65
        sigma_ZSA_los = 0.17

        mu_DS_nlos = -8.45
        sigma_DS_nlos = 0.47
        mu_ASD_nlos = -2.53
        sigma_ASD_nlos = 0.5
        mu_ASA_nlos = 0.49
        sigma_ASA_nlos = 1.37
        mu_ZSD_nlos = -3.03
        sigma_ZSD_nlos = 0.36
        mu_ZSA_nlos = 1.38
        sigma_ZSA_nlos = 0.36

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_70_degrees_dl(self):
        elevation_angle = 70.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.42
        sigma_DS_los = 0.09
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.24
        sigma_ASA_los = 0.43
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.7/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.74
        sigma_ZSA_los = 0.11

        mu_DS_nlos = -8.21
        sigma_DS_nlos = 0.36
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = 0.73
        sigma_ASA_nlos = 0.49
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.36
        sigma_ZSA_nlos = 0.29

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_70_degrees_ul(self):
        elevation_angle = 70.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.42
        sigma_DS_los = 0.09
        mu_ASD_los = -2.83
        sigma_ASD_los = 0.33
        mu_ASA_los = -0.24
        sigma_ASA_los = 0.43
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.9/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 1.7/10.0
        mu_ZSD_los = -2.95
        sigma_ZSD_los = 0.1
        mu_ZSA_los = 1.74
        sigma_ZSA_los = 0.11

        mu_DS_nlos = -8.21
        sigma_DS_nlos = 0.36
        mu_ASD_nlos = -2.35
        sigma_ASD_nlos = 0.58
        mu_ASA_nlos = 0.73
        sigma_ASA_nlos = 0.49
        mu_ZSD_nlos = -2.90
        sigma_ZSD_nlos = 0.42
        mu_ZSA_nlos = 1.36
        sigma_ZSA_nlos = 0.29
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_80_degrees_dl(self):
        elevation_angle = 80.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.39
        sigma_DS_los = 0.05
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.52
        sigma_ASA_los = 0.93
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.5/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 0.7/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.82
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -8.69
        sigma_DS_nlos = 0.29
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = -0.04
        sigma_ASA_nlos = 1.48
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.38
        sigma_ZSA_nlos = 0.2

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_80_degrees_ul(self):
        elevation_angle = 80.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        # Increased batch size, as number of NLOS is very low
        topology = utils.gen_single_sector_topology(batch_size=1000, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.39
        sigma_DS_los = 0.05
        mu_ASD_los = -2.66
        sigma_ASD_los = 0.44
        mu_ASA_los = -0.52
        sigma_ASA_los = 0.93
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.5/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 0.7/10.0
        mu_ZSD_los = -3.21
        sigma_ZSD_los = 0.07
        mu_ZSA_los = 1.82
        sigma_ZSA_los = 0.05

        mu_DS_nlos = -8.69
        sigma_DS_nlos = 0.29
        mu_ASD_nlos = -2.31
        sigma_ASD_nlos = 0.73
        mu_ASA_nlos = -0.04
        sigma_ASA_nlos = 1.48
        mu_ZSD_nlos = -3.20
        sigma_ZSD_nlos = 0.3
        mu_ZSA_nlos = 1.38
        sigma_ZSA_nlos = 0.2
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)

    def test_ka_band_90_degrees_dl(self):
        elevation_angle = 90.0

        direction = "downlink"
        scenario = "sur"
        carrier_frequency = 20.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        
        #Values from tables
        mu_DS_los = -8.37
        sigma_DS_los = 0.02
        mu_ASD_los = float('-inf')
        sigma_ASD_los = 0.0
        mu_ASA_los = -0.15
        sigma_ASA_los = 0.44
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 0.3/10.0
        mu_ZSD_los = float('-inf')
        sigma_ZSD_los = 0.0
        mu_ZSA_los = 1.87
        sigma_ZSA_los = 0.02

        mu_DS_nlos = -8.69
        sigma_DS_nlos = 0.29
        mu_ASD_nlos = float('-inf')
        sigma_ASD_nlos = 0.0
        mu_ASA_nlos = -0.04
        sigma_ASA_nlos = 1.48
        mu_ZSD_nlos = float('-inf')
        sigma_ZSD_nlos = 0.0
        mu_ZSA_nlos = 1.38
        sigma_ZSA_nlos = 0.2

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)


    def test_ka_band_90_degrees_ul(self):
        elevation_angle = 90.0

        direction = "uplink"
        scenario = "sur"
        carrier_frequency = 30.0e9
        ut_array = create_ut_ant(carrier_frequency)
        bs_array = create_bs_ant(carrier_frequency)

        channel_model = SubUrban(carrier_frequency=carrier_frequency,
                                            ut_array=ut_array,
                                            bs_array=bs_array,
                                            direction=direction,
                                            elevation_angle=elevation_angle,
                                            enable_pathloss=True,
                                            enable_shadow_fading=True)
        
        topology = utils.gen_single_sector_topology(batch_size=100, num_ut=100, scenario=scenario, elevation_angle=elevation_angle, bs_height=600000.0)
        channel_model.set_topology(*topology)
        
        lsp_means_los = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los)
        lsp_means_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_mean, channel_model._scenario.los == False)

        lsp_means_los = tf.reduce_mean(lsp_means_los,axis=0)
        lsp_means_nlos = tf.reduce_mean(lsp_means_nlos,axis=0)

        lsp_std_los = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los)
        lsp_std_nlos = tf.boolean_mask(channel_model._scenario.lsp_log_std, channel_model._scenario.los == False)

        lsp_std_los = tf.math.reduce_mean(lsp_std_los,axis=0)
        lsp_std_nlos = tf.math.reduce_mean(lsp_std_nlos,axis=0)

        DS_mean_los = lsp_means_los[0]
        ASD_mean_los = lsp_means_los[1]
        ASA_mean_los = lsp_means_los[2]
        #SF_mean_los = lsp_means_los[3] parameter already tested in step_3
        K_mean_los = lsp_means_los[4]
        ZSA_mean_los = lsp_means_los[5]
        ZSD_mean_los = lsp_means_los[6]

        DS_mean_nlos = lsp_means_nlos[0]
        ASD_mean_nlos = lsp_means_nlos[1]
        ASA_mean_nlos = lsp_means_nlos[2]
        #SF_mean_nlos = lsp_means_nlos[3] parameter already tested in step_3
        #K_mean_nlos = lsp_means_nlos[4] parameter only used in LOS scenario
        ZSA_mean_nlos = lsp_means_nlos[5]
        ZSD_mean_nlos = lsp_means_nlos[6]

        DS_std_los = lsp_std_los[0]
        ASD_std_los = lsp_std_los[1]
        ASA_std_los = lsp_std_los[2]
        SF_std_los = lsp_std_los[3]
        K_std_los = lsp_std_los[4]
        ZSA_std_los = lsp_std_los[5]
        ZSD_std_los = lsp_std_los[6]

        DS_std_nlos = lsp_std_nlos[0]
        ASD_std_nlos = lsp_std_nlos[1]
        ASA_std_nlos = lsp_std_nlos[2]
        #SF_std_nlos = lsp_std_nlos[3] parameter already tested in step_3
        #K_std_nlos = lsp_std_nlos[4] parameter only used in LOS scenario
        ZSA_std_nlos = lsp_std_nlos[5]
        ZSD_std_nlos = lsp_std_nlos[6]
        

        #Values from tables
        mu_DS_los = -8.37
        sigma_DS_los = 0.02
        mu_ASD_los = -1.22
        sigma_ASD_los = 0.31
        mu_ASA_los = -0.15
        sigma_ASA_los = 0.44
        #Divide mu_K by 10 as the Table in the standard is in dB
        mu_K_los = 5.4/10.0
        #Divide sigma_k by 10 as the Table in the standard is in dB
        sigma_K_los = 0.3/10.0
        mu_ZSD_los = -3.49
        sigma_ZSD_los = 0.24
        mu_ZSA_los = 1.87
        sigma_ZSA_los = 0.02

        mu_DS_nlos = -8.69
        sigma_DS_nlos = 0.29
        mu_ASD_nlos = -2.31
        sigma_ASD_nlos = 0.73
        mu_ASA_nlos = -0.04
        sigma_ASA_nlos = 1.48
        mu_ZSD_nlos = -3.20
        sigma_ZSD_nlos = 0.3
        mu_ZSA_nlos = 1.38
        sigma_ZSA_nlos = 0.2
        

        #Toleance of 0.1 for 10000 samples, which should catch incorrect behavior realibly enough, but tolerate variation in 100000 samples
        #with split in NLOS and los cases
        assert math.isclose(DS_mean_los, mu_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_mean_los, mu_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_mean_los, mu_ASA_los, abs_tol=0.1)
        assert math.isclose(K_mean_los, mu_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_mean_los, mu_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_mean_los, mu_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_std_los, sigma_DS_los, abs_tol=0.1)
        assert math.isclose(ASD_std_los, sigma_ASD_los, abs_tol=0.1)
        assert math.isclose(ASA_std_los, sigma_ASA_los, abs_tol=0.1)
        assert math.isclose(K_std_los, sigma_K_los, abs_tol=0.1)
        assert math.isclose(ZSD_std_los, sigma_ZSD_los, abs_tol=0.1)
        assert math.isclose(ZSA_std_los, sigma_ZSA_los, abs_tol=0.1)

        assert math.isclose(DS_mean_nlos, mu_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_mean_nlos, mu_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_mean_nlos, mu_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_mean_nlos, mu_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_mean_nlos, mu_ZSA_nlos, abs_tol=0.1)

        assert math.isclose(DS_std_nlos, sigma_DS_nlos, abs_tol=0.1)
        assert math.isclose(ASD_std_nlos, sigma_ASD_nlos, abs_tol=0.1)
        assert math.isclose(ASA_std_nlos, sigma_ASA_nlos, abs_tol=0.1)
        assert math.isclose(ZSD_std_nlos, sigma_ZSD_nlos, abs_tol=0.1)
        assert math.isclose(ZSA_std_nlos, sigma_ZSA_nlos, abs_tol=0.1)
         
if __name__ == '__main__':
    unittest.main()